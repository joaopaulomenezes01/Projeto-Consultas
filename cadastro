import customtkinter as ctk
import tkinter as tk
from tkcalendar import Calendar
from datetime import datetime, date, timedelta
import sqlite3



ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")
app = ctk.CTk()
app.geometry("600x500")
app.title("Sistema de Login")

conector = sqlite3.connect('cadastro.db')
conector2 = sqlite3.connect('agendamento.db')
cursor = conector.cursor()
cursor2 = conector2.cursor()


cursor.execute('''
CREATE TABLE IF NOT EXISTS usuarios
(id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT NOT NULL,
    cpf TEXT NOT NULL,
    data_nascimento TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    senha TEXT NOT NULL) 
''')

cursor2.execute('''
CREATE TABLE IF NOT EXISTS agendamentos
(id integer PRIMARY KEY AUTOINCREMENT,
    especialidade TEXT NOT NULL,
    profissional TEXT NOT NULL,
    horario TEXT NOT NULL,
    data TEXT NOT NULL,
    usuario_id INTEGER NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id))
''')

conector.commit()
conector2.commit()

def cadastrar_usuario(nome, cpf, data_nascimento, email, senha):
    try:
        cursor.execute('''
        INSERT INTO usuarios (nome, cpf, data_nascimento, email, senha)
        VALUES (?, ?, ?, ?, ?)
        ''', (nome, cpf, data_nascimento, email, senha))
        conector.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    
def verificar_usuario(email, senha):
    cursor.execute('''
    SELECT id FROM usuarios WHERE email = ? AND senha = ?
    ''', (email, senha))
    usuario = cursor.fetchone()
    return usuario[0] if usuario else None #mudei de select tudo (*) pra s√≥ o id pra facilitar j√° que cada um tem id √∫nico
    
data_nascimento_var = tk.StringVar()


profissionais = {
    "Psiquiatria": ["Dr. Rodrigo Pontes"],
    "Ortopedia": ["Dr. Carlos Silva", "Dr¬™ Marcela Andrade"],
    "Ginecologia": ["Dr. Pedro Alves", "Dr¬™ Ana Maria"],
    "Cardiologia": ["Dr. Vin√≠cius Gomes", "Dr. Gabriel de Souza"],
    "Oftalmologia": ["Dr. Felipe Cunha"]
}

horarios = ['08:00', '08:45', '09:30', '10:15', '11:00', '13:00', '14:00', '15:00', '16:00', '17:00']



def abrir_calendario():
    janela_cal = tk.Toplevel(app)
    janela_cal.title("Escolha a Data")
    calendario = Calendar(janela_cal, date_pattern="dd/mm/yyyy", locale='pt_BR')
    calendario.pack(pady=10)
    def selecionar_data():
        data_nascimento_var.set(calendario.get_date())
        janela_cal.destroy()
    ctk.CTkButton(janela_cal, text="Selecionar", command=selecionar_data).pack(pady=10)

def cadastrando():
    for widget in app.winfo_children():
        widget.destroy()
    ctk.CTkLabel(app, text='Nome Completo:').pack(pady=2)
    nome  = ctk.CTkEntry(app, placeholder_text='Digite seu Nome Completo')
    nome.pack(pady=2)
    ctk.CTkLabel(app, text="CPF:").pack(pady=2)
    cpf = ctk.CTkEntry(app, placeholder_text="Digite seu CPF")
    cpf.pack(pady=2)
    ctk.CTkLabel(app, text="Data de Nascimento:").pack(pady=2)
    data = ctk.CTkEntry(app, textvariable=data_nascimento_var, state="readonly", placeholder_text="Clique para selecionar")
    data.pack(pady=3)
    ctk.CTkButton(app, text="Selecionar Data", command=abrir_calendario).pack(pady=2)
    ctk.CTkLabel(app, text='Email:').pack(pady=1)
    email = ctk.CTkEntry(app, placeholder_text='Digite seu Email')
    email.pack(pady=1)
    ctk.CTkLabel(app, text="Senha:").pack(pady=1)
    senha = ctk.CTkEntry(app, placeholder_text="Digite sua senha:", show='*')
    senha.pack(pady=1)

    def salvar_cadastro():
        global email_cadastrado, senha_cadastrada
        email_cadastrado = email.get()
        senha_cadastrada = senha.get()

        if not nome.get() or not cpf.get() or not data_nascimento_var.get() or not email_cadastrado or not senha_cadastrada:
            ctk.CTkLabel(app, text="‚ö†Ô∏è Preencha todos os campos!", text_color="yellow").pack(pady=10)
            return
        sucesso= cadastrar_usuario(nome.get(), cpf.get(), data_nascimento_var.get(), email_cadastrado, senha_cadastrada)
        if sucesso:
            ctk.CTkLabel(app,text="‚úÖ Cadastro realizado com sucesso!", text_color="green").pack(pady=10)
            app.after(1000, login)
        else:
            ctk.CTkLabel(app, text="‚ùå Usu√°rio j√° cadastrado.", text_color="red").pack(pady=10)
            app.after(1000, login)
        
        login()

    ctk.CTkButton(app, text='Salvar Cadastro', command=salvar_cadastro).pack(pady=10)
    ctk.CTkButton(app, text='Voltar ao Login', command=login).pack(pady=10)



def login():
    for widget in app.winfo_children():
        widget.destroy()
   
    ctk.CTkLabel(app, text="Usu√°rio:").pack(pady=10)
    campo_usuario = ctk.CTkEntry(app, placeholder_text="Digite seu email")
    campo_usuario.pack(pady=10)
    ctk.CTkLabel(app, text="Senha:").pack(pady=10)
    campo_senha = ctk.CTkEntry (app, placeholder_text="Digite sua senha", show='*')
    campo_senha.pack(pady=10)
    resultado = ctk.CTkLabel(app, text='')
    resultado.pack(pady=10)

    def verificar():
        email=campo_usuario.get()
        senha=campo_senha.get()
        if not campo_usuario.get() or not campo_senha.get():
          resultado.configure(text="‚ö†Ô∏è Preencha todos os campos!", text_color="yellow")
          return
        global id_usuario_logado
        id_usuario_logado=verificar_usuario(email, senha) #cria vari√°vel global, verifica se ele ta no banco de dados dos usuarios, e pega a id
        if id_usuario_logado:
          resultado.configure(text="‚úÖ Login bem-sucedido!", text_color="green")
          app.after(1000, escolher_especialidade)
        else:
         resultado.configure(text="‚ùå Email ou senha incorretos.", text_color="red")
    ctk.CTkButton(app, text="Efetuar Login", command=verificar).pack(pady=10)

    cads = ctk.CTkLabel(app, text="N√£o tem cadastro? Clique aqui", text_color="blue", cursor="hand2")
    cads.pack(pady=10)
    cads.bind("<Button-1>", lambda e: cadastrando())




def escolher_especialidade():
    for widget in app.winfo_children():
        widget.destroy()
    ctk.CTkLabel(app, text="Escolha a especialidade:").pack(pady=5)
    box_esp = ctk.CTkOptionMenu(app, values=list(profissionais.keys()))
    box_esp.pack(pady=5)
    ctk.CTkButton(app, text="Pr√≥ximo", command=lambda: escolher_profissional(box_esp.get())).pack(pady=10)
def escolher_profissional(especialidade):
    for widget in app.winfo_children():
        widget.destroy()

    data_var = tk.StringVar()

    ctk.CTkLabel(app, text=f"Profissionais dispon√≠veis ({especialidade}):").pack(pady=5)

    nomes = profissionais.get(especialidade, [])
    box_prof = ctk.CTkOptionMenu(app, values=nomes)
    box_prof.pack(pady=5)

    ctk.CTkLabel(app, text="Hor√°rio dispon√≠vel:").pack(pady=5)
    box_horario = ctk.CTkOptionMenu(app, values=horarios)
    box_horario.pack(pady=5)

    ctk.CTkLabel(app, text='Data da consulta:').pack(pady=5)
    entrada_data = ctk.CTkEntry(app, textvariable=data_var, state="readonly", placeholder_text="Clique no bot√£o para escolher a data")
    entrada_data.pack(pady=5)

    def abrir_calendario():
        janela = tk.Toplevel(app)
        janela.title("Selecionar Data")
        data_inicio=date.today()
        data_final=data_inicio+timedelta(days=30) #adiciona 30 dias √† data de in√≠cio,ent essa √© a data limite p selecionar
        calendario = Calendar(janela, date_pattern="dd/mm/yyyy", locale='pt_BR',mindate=data_inicio,maxdate=data_final)
        calendario.pack(pady=10)

        aviso_dias = ctk.CTkLabel(janela, text="", text_color="red")
        aviso_dias.pack(pady=10)

        def escolher():
            data_escolhida=calendario.get_date()
            data_str=datetime.strptime(data_escolhida,"%d/%m/%Y")
            if data_str.weekday()>=5:
                aviso_dias.configure(text="‚ùå Apenas dias √∫teis s√£o permitidos.") #msg caso nao escolha dia de semana
            else:
                data_var.set(calendario.get_date())
                janela.destroy()

        ctk.CTkButton(janela, text="Confirmar Data", command=escolher).pack(pady=10)

    ctk.CTkButton(app, text="Selecionar Data", command=abrir_calendario).pack(pady=5)

    resultado_label = ctk.CTkLabel(app, text="")
    resultado_label.pack(pady=5)

    def confirmar():
        prof = box_prof.get()
        horario = box_horario.get()
        data = data_var.get()

        if not prof or not horario or not data:
            resultado_label.configure(text="‚ö†Ô∏è Preencha todos os campos!", text_color="orange")
        else:
            cursor2.execute("insert into agendamentos (especialidade, profissional,horario,data, usuario_id) values (?,?,?,?,?) ",(especialidade,prof,horario,data,id_usuario_logado)) #guarda em agendamentos
            conector2.commit()
            resultado_label.configure(
                text=f"‚úÖ Consulta marcada com {prof} ({especialidade})\nüóìÔ∏è {data} √†s {horario}",
                text_color="green"
            )

    ctk.CTkButton(app, text="Confirmar Agendamento", command=confirmar).pack(pady=10)

    ctk.CTkButton(app, text="Voltar", command=escolher_especialidade).pack(pady=5)


    resultado_label = ctk.CTkLabel(app, text="")
    resultado_label.pack(pady=5)


def confirmar_agendamento(especialidade, profissional, horario, data):
    for widget in app.winfo_children():
        widget.destroy()
    ctk.CTkLabel(app, text=f"Consulta marcada com {profissional}\nEspecialidade: {especialidade}\nData: {data}\nHor√°rio: {horario}", text_color="green").pack(pady=10)
    ctk.CTkButton(app, text="Sair", command=app.quit).pack(pady=10)

def historico_agendamentos():
    for widget in app.winfo_children():
        widget.destroy()
    ctk.CTkLabel(app, text="Hist√≥rico de Agendamentos").pack(pady=10)
    
    cursor2.execute('SELECT * FROM agendamentos')
    agendamentos = cursor2.fetchall()
    
    if not agendamentos:
        ctk.CTkLabel(app, text="Nenhum agendamento encontrado.").pack(pady=10)
    else:
        for agendamento in agendamentos:
            ctk.CTkLabel(app, text=f"ID: {agendamento[0]}, Especialidade: {agendamento[1]}, Profissional: {agendamento[2]}, Hor√°rio: {agendamento[3]}, Data: {agendamento[4]}").pack(pady=5)

    ctk.CTkButton(app, text="Voltar", command=login).pack

login()
app.mainloop()
