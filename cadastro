import customtkinter as ctk
import tkinter as tk
from tkcalendar import Calendar


ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")
app = ctk.CTk()
app.geometry("600x500")
app.title("Sistema de Login")

email_cadastrado = ""
senha_cadastrada = ""
data_nascimento_var = tk.StringVar()


profissionais = {
    "Psiquiatria": ["Dr. Rodrigo Pontes"],
    "Ortopedia": ["Dr. Carlos Silva", "Dr¬™ Marcela Andrade"],
    "Ginecologia": ["Dr. Pedro Alves", "Dr¬™ Ana Maria"],
    "Cardiologia": ["Dr. Vin√≠cius Gomes", "Dr. Gabriel de Souza"],
    "Oftalmologia": ["Dr. Felipe Cunha"]
}

horarios = ['08:00', '08:45', '09:30', '10:15', '11:00', '13:00', '14:00', '15:00', '16:00', '17:00']



def abrir_calendario():
    janela_cal = tk.Toplevel(app)
    janela_cal.title("Escolha a Data")
    calendario = Calendar(janela_cal, date_pattern="dd/mm/yyyy", locale='pt_BR')
    calendario.pack(pady=10)
    def selecionar_data():
        data_nascimento_var.set(calendario.get_date())
        janela_cal.destroy()
    ctk.CTkButton(janela_cal, text="Selecionar", command=selecionar_data).pack(pady=10)

def cadastrando():
    for widget in app.winfo_children():
        widget.destroy()
    ctk.CTkLabel(app, text='Nome Completo:').pack(pady=2)
    nome  = ctk.CTkEntry(app, placeholder_text='Digite seu Nome Completo')
    nome.pack(pady=2)
    ctk.CTkLabel(app, text="CPF:").pack(pady=2)
    cpf = ctk.CTkEntry(app, placeholder_text="Digite seu CPF")
    cpf.pack(pady=2)
    ctk.CTkLabel(app, text="Data de Nascimento:").pack(pady=2)
    data = ctk.CTkEntry(app, textvariable=data_nascimento_var, state="readonly", placeholder_text="Clique para selecionar")
    data.pack(pady=3)
    ctk.CTkButton(app, text="Selecionar Data", command=abrir_calendario).pack(pady=2)
    ctk.CTkLabel(app, text='Email:').pack(pady=1)
    email = ctk.CTkEntry(app, placeholder_text='Digite seu Email')
    email.pack(pady=1)
    ctk.CTkLabel(app, text="Senha:").pack(pady=1)
    senha = ctk.CTkEntry(app, placeholder_text="Digite sua senha:", show='*')
    senha.pack(pady=1)

    def salvar_cadastro():
        global email_cadastrado, senha_cadastrada
        email_cadastrado = email.get()
        senha_cadastrada = senha.get()
        login()

    ctk.CTkButton(app, text='Salvar Cadastro', command=salvar_cadastro).pack(pady=10)
    ctk.CTkButton(app, text='Voltar ao Login', command=login).pack(pady=10)



def login():
    for widget in app.winfo_children():
        widget.destroy()
   
    ctk.CTkLabel(app, text="Usu√°rio:").pack(pady=10)
    campo_usuario = ctk.CTkEntry(app, placeholder_text="Digite seu email")
    campo_usuario.pack(pady=10)
    ctk.CTkLabel(app, text="Senha:").pack(pady=10)
    campo_senha = ctk.CTkEntry (app, placeholder_text="Digite sua senha", show='*')
    campo_senha.pack(pady=10)
    resultado = ctk.CTkLabel(app, text='')
    resultado.pack(pady=10)

    def verificar():
        if not campo_usuario.get() or not campo_senha.get():
          resultado.configure(text="‚ö†Ô∏è Preencha todos os campos!", text_color="yellow")
          return

        if campo_usuario.get() == email_cadastrado and campo_senha.get() == senha_cadastrada:
          resultado.configure(text="‚úÖ Login bem-sucedido!", text_color="green")
          app.after(1000, escolher_especialidade)
        else:
         resultado.configure(text="‚ùå Email ou senha incorretos.", text_color="red")
    ctk.CTkButton(app, text="Efetuar Login", command=verificar).pack(pady=10)

    cads = ctk.CTkLabel(app, text="N√£o tem cadastro? Clique aqui", text_color="blue", cursor="hand2")
    cads.pack(pady=10)
    cads.bind("<Button-1>", lambda e: cadastrando())




def escolher_especialidade():
    for widget in app.winfo_children():
        widget.destroy()
    ctk.CTkLabel(app, text="Escolha a especialidade:").pack(pady=5)
    box_esp = ctk.CTkOptionMenu(app, values=list(profissionais.keys()))
    box_esp.pack(pady=5)
    ctk.CTkButton(app, text="Pr√≥ximo", command=lambda: escolher_profissional(box_esp.get())).pack(pady=10)
def escolher_profissional(especialidade):
    for widget in app.winfo_children():
        widget.destroy()

    data_var = tk.StringVar()

    ctk.CTkLabel(app, text=f"Profissionais dispon√≠veis ({especialidade}):").pack(pady=5)

    nomes = profissionais.get(especialidade, [])
    box_prof = ctk.CTkOptionMenu(app, values=nomes)
    box_prof.pack(pady=5)

    ctk.CTkLabel(app, text="Hor√°rio dispon√≠vel:").pack(pady=5)
    box_horario = ctk.CTkOptionMenu(app, values=horarios)
    box_horario.pack(pady=5)

    ctk.CTkLabel(app, text='Data da consulta:').pack(pady=5)
    entrada_data = ctk.CTkEntry(app, textvariable=data_var, state="readonly", placeholder_text="Clique no bot√£o para escolher a data")
    entrada_data.pack(pady=5)

    def abrir_calendario():
        janela = tk.Toplevel(app)
        janela.title("Selecionar Data")
        calendario = Calendar(janela, date_pattern="dd/mm/yyyy", locale='pt_BR')
        calendario.pack(pady=10)

        def escolher():
            data_var.set(calendario.get_date())
            janela.destroy()

        ctk.CTkButton(janela, text="Confirmar Data", command=escolher).pack(pady=10)

    ctk.CTkButton(app, text="Selecionar Data", command=abrir_calendario).pack(pady=5)

    resultado_label = ctk.CTkLabel(app, text="")
    resultado_label.pack(pady=5)

    def confirmar():
        prof = box_prof.get()
        horario = box_horario.get()
        data = data_var.get()

        if not prof or not horario or not data:
            resultado_label.configure(text="‚ö†Ô∏è Preencha todos os campos!", text_color="orange")
        else:
            resultado_label.configure(
                text=f"‚úÖ Consulta marcada com {prof} ({especialidade})\nüóìÔ∏è {data} √†s {horario}",
                text_color="green"
            )

    ctk.CTkButton(app, text="Confirmar Agendamento", command=confirmar).pack(pady=10)

    ctk.CTkButton(app, text="Voltar", command=escolher_especialidade).pack(pady=5)


    resultado_label = ctk.CTkLabel(app, text="")
    resultado_label.pack(pady=5)


def confirmar_agendamento(especialidade, profissional, horario, data):
    for widget in app.winfo_children():
        widget.destroy()
    ctk.CTkLabel(app, text=f"Consulta marcada com {profissional}\nEspecialidade: {especialidade}\nData: {data}\nHor√°rio: {horario}", text_color="green").pack(pady=10)
    ctk.CTkButton(app, text="Sair", command=app.quit).pack(pady=10)


login()
app.mainloop()
