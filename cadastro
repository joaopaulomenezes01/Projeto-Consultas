import customtkinter as ctk
import tkinter as tk
from tkcalendar import Calendar
from datetime import datetime, date, timedelta
import sqlite3
from PIL import Image, ImageTk

ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")
app = ctk.CTk()
app.geometry("800x500")


frame_inicial = ctk.CTkFrame(app)
frame_login = ctk.CTkFrame(app)

frame_inicial.pack(fill="both", expand=True)

def mostrar_login():
    cursor2.execute("insert into agendamentos (especialidade, profissional,horario,data, usuario_id) values (?,?,?,?,?) ", ...)
    frame_inicial.pack_forget()
    frame_login.pack(fill="both", expand=True)

frame_esquerda = ctk.CTkFrame(frame_inicial, width=400, fg_color="white")
frame_esquerda.pack(side="left", fill="both")

imagem = Image.open("confirma1.png")
ctk_img = ctk.CTkImage(light_image=imagem, size=(300, 300))
label_img = ctk.CTkLabel(frame_esquerda, image=ctk_img, text="")
label_img.pack(expand=True)

frame_direita = ctk.CTkFrame(frame_inicial, fg_color="#d1d1d1")
frame_direita.pack(side="left", fill="both", expand=True)

ctk.CTkLabel(frame_direita, text="Sistema de Agendamento de Consultas",
font=("Comic Sans MS", 20, "bold")).pack(pady=(50, 10))

ctk.CTkLabel(frame_direita, text="Desenvolvido por: Júlia Gabrielle e João Paulo",
font=("Comic Sans MS", 14)).pack(pady=5)

ctk.CTkLabel(frame_direita, text="Versão 1.0", font=("Comic Sans MS", 14)).pack(pady=5)
ctk.CTkLabel(frame_direita, text="© 2025 Todos os direitos reservados", font=("Comic Sans MS", 12)).pack(pady=10)

botao_iniciar = ctk.CTkButton(frame_direita, text="Iniciar", width=200, command=mostrar_login)
botao_iniciar.pack(pady=20)


imagem = Image.open('testa.jpeg')
imagem = imagem.resize((350,350))
img_tk = ctk.CTkImage(imagem)
app.title("Sistema de Login")
imagem_label = ctk.CTkLabel(frame_esquerda, image =img_tk,text='')
imagem_label.image = img_tk
imagem_label.pack(expand=True)


conector = sqlite3.connect('cadastro.db')
conector2 = sqlite3.connect('agendamento.db')
cursor = conector.cursor()
cursor2 = conector2.cursor()


cursor.execute('''
CREATE TABLE IF NOT EXISTS usuarios
(id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT NOT NULL,
    cpf TEXT NOT NULL,
    data_nascimento TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    senha TEXT NOT NULL) 
''')

cursor2.execute('''
CREATE TABLE IF NOT EXISTS agendamentos
(id integer PRIMARY KEY AUTOINCREMENT, regioes TEXT NOT NULL,
    cidade TEXT NOT NULL,
    especialidade TEXT NOT NULL,
    profissional TEXT NOT NULL,
    horario TEXT NOT NULL,
    data TEXT NOT NULL,
    usuario_id INTEGER NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id))
''') #adc regioes e cidade na tabela de agendamentos

conector.commit()
conector2.commit()

def cadastrar_usuario(nome, cpf, data_nascimento, email, senha):
    try:
        cursor.execute('''
        INSERT INTO usuarios (nome, cpf, data_nascimento, email, senha)
        VALUES (?, ?, ?, ?, ?)
        ''', (nome, cpf, data_nascimento, email, senha))
        conector.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    
def verificar_usuario(email, senha):
    cursor.execute('''
    SELECT id FROM usuarios WHERE email = ? AND senha = ?
    ''', (email, senha))
    usuario = cursor.fetchone()
    return usuario[0] if usuario else None #mudei de select tudo (*) pra só o id pra facilitar já que cada um tem id único
    
data_nascimento_var = tk.StringVar(app)

#adc mais profissionais
profissionais = {
    "Cardiologia": ["Dr. Vinícius Gomes","Dr. Gabriel de Souza","Drª Bárbara Vitória","Dr. Bruno Carvalho","Dr. Manoella Silva","Drª Dandara Cruz", "Dr. Celso da Luz"],
    
    "Clínica Geral": ["Dr. Marcos André","Dr. Wallace Bernardo","Drª Beatriz Dias","Drª Brenda Maria","Dr. Breno Campos","Dr. Bernardo Maia","Drª Luíza Rebecca","Drª Laíza Santos" ],

    "Endocrinologia": ["Dr. José Gonçalves","Drª Mirella Alves","Dr. Thiago Ribeiro","Dr. João Victor","Dr. Arthur Rebouças","Dr. Cleiton Pereira","Drª Danielle Larissa","Drª Diana Cavallazi"],

     "Ginecologia": ["Dr. Pedro Alves","Drª Ana Maria","Drª Bruna Rodrigues","Drª Luana Maria","Drª Luna Ribeiro","Dr. Alessandro Victor","Dr. Miguel da Costa"],

     "Nutrição": ["Dr. João Paulo","Drª Maria Alice","Drª Kayllane Letícia","Drª Victória Almeida","Dr. Alex de Teixeira","Dr. Kléber Eduardo","Dr. Kleyton Paulo"],

     "Odontologia": ["Drª Letícia Dias","Dr. Matheus Souza","Dr. Rhuan Barros","Drª Gleice Batista","Drª Jennifer Barbosa","Dr. Pablo Arruda","Drª Esther Silva","Dr. Samuel Queiroz"],
    
    "Oftalmologia": ["Dr. Felipe Cunha","Dr. Leandro Moura","Drª Laura Campos","Drª Victória Borges","Drª Selma Morais","Drª Maura Fontes","Dr. Jonas do Nascimento"],
    
    "Ortopedia": ["Drª Marcela Andrade","Drª Carolina Oliveira","Drª Suellen Ferreira","Dr. Carlos Silva","Dr. Rennan Nunes","Dr. Christiano Fernando","Dr. Luciano Neves","Drª Fernanda Ramos"],

     "Pediatria": ["Drª Alexandra Barros","Drª Camila Ramos","Dr. Diego dos Reis","Dr. Jorge Montes","Drª Lucinda da Rocha","Drª Priscilla Fontes","Dr. Ronaldo Santana"],

     "Psiquiatria": ["Dr. Rodrigo Pontes","Drª Juliana Cunha","Drª Eliana Teixeira","Dr. Davi Soares","Dr. Enzo Vieira","Drª Valentina Eduarda"]
}


horarios = ['08:00', '08:45', '09:30', '10:15', '11:00', '13:00', '14:00', '15:00', '16:00', '17:00']

#adc regioes e cidades
regioes = {"Região Metropolitana": ["Recife","Paulista","Olinda"],
           "Agreste": ["Garanhuns","Caruaru","Vitória de Santo Antão","Bezerros","Gravatá"],
           "Sertão": ["Petrolina","Floresta","Serra Talhada","Arcoverde","Salgueiro"]}


def abrir_calendario():
    janela_cal = tk.Toplevel(app)
    janela_cal.title("Escolha a Data")
    calendario = Calendar(janela_cal, date_pattern="dd/mm/yyyy", locale='pt_BR')
    calendario.pack(pady=10)
    def selecionar_data():
        data_nascimento_var.set(calendario.get_date())
        janela_cal.destroy()
    ctk.CTkButton(janela_cal, text="Selecionar", command=selecionar_data).pack(pady=10)

def login():
    for widget in app.winfo_children():
        widget.destroy()

    img1 = Image.open("usuario.png")
    ctk_img1 = ctk.CTkImage(light_image=img1, size=(21, 21))
    img2 = Image.open("senha.png")
    ctk_img2 = ctk.CTkImage(light_image=img2, size=(21, 21))
    img3 = Image.open("cliqueaqui.png")
    ctk_img3 = ctk.CTkImage(light_image=img3, size=(21, 21))
    ctk.CTkLabel(master=app, text="Usuário:", image= ctk_img1, compound='left').pack(pady=10)

    campo_usuario = ctk.CTkEntry(app, placeholder_text="Digite seu email")
    campo_usuario.pack(pady=10)
    ctk.CTkLabel(master=app, text="Senha:", image=ctk_img2, compound='left').pack(pady=10)
    campo_senha = ctk.CTkEntry (app, placeholder_text="Digite sua senha", show='*')
    campo_senha.pack(pady=10)
    resultado = ctk.CTkLabel(app, text='')
    resultado.pack(pady=10)

    def verificar():
        email=campo_usuario.get()
        senha=campo_senha.get()
        if not campo_usuario.get() or not campo_senha.get():
          resultado.configure(text="⚠️ Preencha todos os campos!", text_color="yellow")
          return
        global id_usuario_logado
        id_usuario_logado=verificar_usuario(email, senha) #cria variável global, verifica se ele ta no banco de dados dos usuarios, e pega a id
        if id_usuario_logado:
          resultado.configure(text="✅ Login bem-sucedido!", text_color="green")
          app.after(1000,lambda: inicio()) #adc tela de inicio
        else:
         resultado.configure(text="❌ Email ou senha incorretos.", text_color="red")
    ctk.CTkButton(app, text="Efetuar Login", command=verificar).pack(pady=10)

    cads = ctk.CTkLabel(app, text="Não tem cadastro? Clique aqui", image= ctk_img3, compound="right", text_color="blue", cursor="hand2")
    cads.pack(pady=10)
    cads.bind("<Button-1>", lambda e: cadastrando())

def cadastrando():
    for widget in app.winfo_children():
        widget.destroy()
    img14 = Image.open("email.png")
    ctk_img14 = ctk.CTkImage(light_image=img14, size=(21, 21))
    img15 = Image.open("senha.png")
    ctk_img15 = ctk.CTkImage(light_image=img15, size=(21, 21))
    img16 = Image.open("usuario.png")
    ctk_img16 = ctk.CTkImage(light_image=img16, size=(21, 21))
    ctk.CTkLabel(app, text='Nome Completo:').pack(pady=2)
    nome  = ctk.CTkEntry(app, placeholder_text='Digite seu Nome Completo')
    nome.pack(pady=2)
    ctk.CTkLabel(app, text="CPF:").pack(pady=2)
    cpf = ctk.CTkEntry(app, placeholder_text="Digite seu CPF")
    cpf.pack(pady=2)
    ctk.CTkLabel(app, text="Data de Nascimento:").pack(pady=2)
    data = ctk.CTkEntry(app, textvariable=data_nascimento_var, state="readonly", placeholder_text="Clique para selecionar")
    data.pack(pady=3)
    ctk.CTkButton(app, text="Selecionar Data", command=abrir_calendario).pack(pady=2)
    ctk.CTkLabel(app, text='Usuário:', image= ctk_img16, compound='left').pack(pady=2)
    email_entry = ctk.CTkEntry(app, placeholder_text='Digite seu Email', image= ctk_img14, compound='right')
    email_entry.pack(pady=2)
    ctk.CTkLabel(app, text="Senha:").pack(pady=2)
    senha_entry = ctk.CTkEntry(app, placeholder_text="Digite sua senha:",image= ctk_img15, compound='right',show='*')
    senha_entry.pack(pady=2)

    def salvar_cadastro():
        global email_cadastrado, senha_cadastrada
        email_cadastrado = email_entry.get()
        senha_cadastrada = senha_entry.get()

        if not nome.get() or not cpf.get() or not data_nascimento_var.get() or not email_cadastrado or not senha_cadastrada:
            ctk.CTkLabel(app, text="⚠️ Preencha todos os campos!", text_color="yellow").pack(pady=10)
            return
        sucesso= cadastrar_usuario(nome.get(), cpf.get(), data_nascimento_var.get(), email_cadastrado, senha_cadastrada)
        if sucesso:
            ctk.CTkLabel(app,text="✅ Cadastro realizado com sucesso!", text_color="green").pack(pady=10)
            app.after(1000, login)
        else:
            ctk.CTkLabel(app, text="❌ Usuário já cadastrado.", text_color="red").pack(pady=10)
            app.after(1000, login)
        
        login()

    ctk.CTkButton(app, text='Salvar Cadastro', command=salvar_cadastro).pack(pady=10)
    ctk.CTkButton(app, text='Voltar ao Login', command=login).pack(pady=10)
    ctk.CTkButton(app, text='Salvar Cadastro', command=salvar_cadastro).pack(pady=10)
    ctk.CTkButton(app, text='Voltar ao Login', command=login).pack(pady=10)



def login():
    for widget in app.winfo_children():
        widget.destroy()

    img1 = Image.open("usuario.png")
    ctk_img1 = ctk.CTkImage(light_image=img1, size=(21, 21))
    img2 = Image.open("senha.png")
    ctk_img2 = ctk.CTkImage(light_image=img2, size=(21, 21))
    img3 = Image.open("cliqueaqui.png")
    ctk_img3 = ctk.CTkImage(light_image=img3, size=(21, 21))
    ctk.CTkLabel(master=app, text="Usuário:", image= ctk_img1, compound='left').pack(pady=10)

    campo_usuario = ctk.CTkEntry(app, placeholder_text="Digite seu email")
    campo_usuario.pack(pady=10)
    ctk.CTkLabel(master=app, text="Senha:", image=ctk_img2, compound='left').pack(pady=10)
    campo_senha = ctk.CTkEntry (app, placeholder_text="Digite sua senha", show='*')
    campo_senha.pack(pady=10)
    resultado = ctk.CTkLabel(app, text='')
    resultado.pack(pady=10)

    def verificar():
        email=campo_usuario.get()
        senha=campo_senha.get()
        if not campo_usuario.get() or not campo_senha.get():
          resultado.configure(text="⚠️ Preencha todos os campos!", text_color="yellow")
          return
        global id_usuario_logado
        id_usuario_logado=verificar_usuario(email, senha) #cria variável global, verifica se ele ta no banco de dados dos usuarios, e pega a id
        if id_usuario_logado:
          resultado.configure(text="✅ Login bem-sucedido!", text_color="green")
          app.after(1000,lambda: inicio()) #adc tela de inicio
        else:
         resultado.configure(text="❌ Email ou senha incorretos.", text_color="red")
    ctk.CTkButton(app, text="Efetuar Login", command=verificar).pack(pady=10)

    cads = ctk.CTkLabel(app, text="Não tem cadastro? Clique aqui", image= ctk_img3, compound="right", text_color="blue", cursor="hand2")
    cads.pack(pady=10)
    cads.bind("<Button-1>", lambda e: cadastrando())

def inicio():
    for widget in app.winfo_children():
        widget.destroy()
    ctk.CTkLabel(app,text="Bem-vindo(a)! O que deseja fazer?").pack(pady=5)
    ctk.CTkButton(app, text="Ver meu histórico de agendamentos", command=lambda: historico_agendamentos()).pack(pady=10)
    ctk.CTkButton(app,text="Iniciar sessão de agendamento de consultas", command=lambda:escolher_regiao()).pack(pady=10)


def escolher_regiao(): #adc def p regiao
    for widget in app.winfo_children():
        widget.destroy()
    img4 = Image.open("regioes.png")
    ctk_img4 = ctk.CTkImage(light_image=img4, size=(21, 21))
    ctk.CTkLabel(app,text="Escolha a região desejada:", image=ctk_img4,compound='left').pack(pady=5)
    box_regiao=ctk.CTkOptionMenu(app,values=list(regioes.keys()))
    box_regiao.pack(pady=5)
    ctk.CTkButton(app,text="Próximo", command=lambda:escolher_cidade(box_regiao.get())).pack(pady=10)

def escolher_cidade(regiao): #adc def p cidade
    for widget in app.winfo_children():
        widget.destroy()
    ctk.CTkLabel(app, text= f"Escolha a cidade em {regiao}:").pack(pady=5)
    cidades=regioes.get(regiao,[])
    box_cidade=ctk.CTkOptionMenu(app,values=cidades)
    box_cidade.pack(pady=5)
    ctk.CTkButton(app,text="Próximo", command=lambda: escolher_especialidade(regiao,box_cidade.get())).pack(pady=10)


def escolher_especialidade(regiao,cidade):
    for widget in app.winfo_children():
        widget.destroy()
    img5 = Image.open("especialidade.png")
    ctk_img5 = ctk.CTkImage(light_image=img5, size=(21, 21))
    ctk.CTkLabel(app, text="Escolha a especialidade:", image= ctk_img5, compound='left').pack(pady=5)
    box_esp = ctk.CTkOptionMenu(app, values=list(profissionais.keys()))
    box_esp.pack(pady=5)
    ctk.CTkButton(app, text="Próximo", command=lambda: escolher_profissional(regiao,cidade,box_esp.get())).pack(pady=10)
def escolher_profissional(regiao,cidade,especialidade):
    for widget in app.winfo_children():
        widget.destroy()

    data_var = tk.StringVar(app)
    img6 = Image.open("profissional.png")
    ctk_img6 = ctk.CTkImage(light_image=img6, size=(21, 21))
    img7 = Image.open("horarios.png")
    ctk_img7 = ctk.CTkImage(light_image=img7, size=(21, 21))
    img8 = Image.open("calendario.png")
    ctk_img8 = ctk.CTkImage(light_image=img8, size=(21, 21))

    ctk.CTkLabel(app, text=f"Profissionais disponíveis ({especialidade}):", image=ctk_img6, compound='left').pack(pady=5)

    nomes = profissionais.get(especialidade, [])
    box_prof = ctk.CTkOptionMenu(app, values=nomes)
    box_prof.pack(pady=5)
    ctk.CTkLabel(app, text=f"Região: {regiao}").pack(pady=5)
    ctk.CTkLabel(app, text=f"Cidade: {cidade}").pack(pady=5)
    
    ctk.CTkLabel(app, text="Horário disponível:", image=ctk_img7, compound='left').pack(pady=5)
    box_horario = ctk.CTkOptionMenu(app, values=horarios)
    box_horario.pack(pady=5)

    ctk.CTkLabel(app, text='Data da consulta:', image=ctk_img8, compound='left').pack(pady=5)
    entrada_data = ctk.CTkEntry(app, textvariable=data_var, state="readonly", placeholder_text="Clique no botão para escolher a data")
    entrada_data.pack(pady=5)

    def abrir_calendario():
        janela = tk.Toplevel(app)
        janela.title("Selecionar Data")
        data_inicio=date.today()
        data_final=data_inicio+timedelta(days=30) #adiciona 30 dias à data de início,ent essa é a data limite p selecionar
        calendario = Calendar(janela, date_pattern="dd/mm/yyyy", locale='pt_BR',mindate=data_inicio,maxdate=data_final)
        calendario.pack(pady=10)

        aviso_dias = ctk.CTkLabel(janela, text="", text_color="red")
        aviso_dias.pack(pady=10)

        def escolher():
            img9 = Image.open("alertaerro.png")
            ctk_img9 = ctk.CTkImage(light_image=img9, size=(21, 21))
            data_escolhida=calendario.get_date()
            data_str=datetime.strptime(data_escolhida,"%d/%m/%Y")
            if data_str.weekday()>=5:
                aviso_dias.configure(text=" Os atendimentos só são realizados em dias úteis. Escolha outra data", image=ctk_img9, compound = 'left') #msg caso nao escolha dia de semana
            else:
                data_var.set(calendario.get_date())
                janela.destroy()

        ctk.CTkButton(janela, text="Confirmar Data", command=escolher).pack(pady=10)

    ctk.CTkButton(app, text="Selecionar Data", command=abrir_calendario).pack(pady=5)

    resultado_label = ctk.CTkLabel(app, text="")
    resultado_label.pack(pady=5)

    def confirmar():
        prof = box_prof.get()
        horario = box_horario.get()
        data = data_var.get()

        if not prof or not horario or not data:
            resultado_label.configure(text="⚠️ Preencha todos os campos!", text_color="orange")
        else:
            resultado_label.configure(
                text=f"✅ Consulta marcada com {prof} ({especialidade})\n🗓️ {data} às {horario}",
                text_color="green"
            )
            app.after(1000, lambda:confirmar_agendamento(regiao,cidade,especialidade,prof,horario,data))

    ctk.CTkButton(app, text="Confirmar Agendamento", command=lambda: confirmar()).pack(pady=10)

    ctk.CTkButton(app, text="Voltar", command=lambda: escolher_especialidade(regiao,cidade)).pack(pady=5)


    resultado_label = ctk.CTkLabel(app, text="")
    resultado_label.pack(pady=5)

#adc regiao e cidade aqui
def confirmar_agendamento(regiao,cidade,especialidade, profissional, horario, data):
    for widget in app.winfo_children():
        widget.destroy()
    img10 = Image.open("historico.png")
    ctk_img10 = ctk.CTkImage(light_image=img10, size=(100, 100))
    img11 = Image.open("confirma2.png")
    ctk_img11 = ctk.CTkImage(light_image=img11, size=(100, 100))
    

    
    ctk.CTkLabel(master=app, text="Agendamento Confirmado!", image=ctk_img11, compound='left' , font=("Arial", 20, "bold")).pack(pady=10)
    cursor2.execute("insert into agendamentos (regioes, cidade, especialidade, profissional, horario, data, usuario_id) values (?,?,?,?,?,?,?)",
                    (regiao, cidade, especialidade, profissional, horario, data, id_usuario_logado)) #guarda em agendamentos
    cursor2.execute("insert into agendamentos (especialidade, profissional,horario,data, usuario_id) values (?,?,?,?,?) ",(especialidade,profissional,horario,data,id_usuario_logado)) #guarda em agendamentos
    conector2.commit()
    ctk.CTkLabel(app, text=f"Consulta marcada em {regiao}, na cidade de {cidade}, com {profissional}\nEspecialidade: {especialidade}\nData: {data}\nHorário: {horario}", text_color="green").pack(pady=10)
    ctk.CTkButton(app, text="Sair", command=app.quit).pack(pady=10)
    ctk.CTkButton(app, text="Ver meu histórico de agendamentos", image=ctk_img10, compound='left', command=lambda: historico_agendamentos()).pack(pady=10)

def historico_agendamentos():
    for widget in app.winfo_children():
        widget.destroy()
    img13 = Image.open("lupa.png")
    ctk_img13 = ctk.CTkImage(light_image=img13, size=(21, 21))
    ctk.CTkLabel(app, text="Histórico de Agendamentos", image=ctk_img13, compound='right').pack(pady=10)
    
    cursor2.execute('SELECT * FROM agendamentos WHERE usuario_id=?', [id_usuario_logado])
    agendamentos = cursor2.fetchall()
    
    if not agendamentos:
        ctk.CTkLabel(app, text="Nenhum agendamento encontrado.").pack(pady=10)
    else:
        for agendamento in agendamentos:
            ctk.CTkLabel(app, text=f"ID: {agendamento[0]}, Especialidade: {agendamento[1]}, Profissional: {agendamento[2]}, Horário: {agendamento[3]}, Data: {agendamento[4]}").pack(pady=5)

    ctk.CTkButton(app, text="Voltar", command=login).pack(pady=10)

login()
app.mainloop()

#O QUE FALTA: 1- ORGANIZAR MÉDICOS POR CIDADES/ 2- BUG DO HISTORICO??/ 3- PARTE VISUAL/ 4- CONDICIONAIS DO E-MAIL E CPF ...